<?php /**  * Create string alias  * * @var		string * @return	string */function createAlias($string, $include_ext = false) {	$string = (string) $string;	$foreign_characters = array(		'/ä|æ|ǽ/' => 'ae',		'/ö|œ/' => 'oe',		'/ü/' => 'ue',		'/Ä/' => 'Ae',		'/Ü/' => 'Ue',		'/Ö/' => 'Oe',		'/À|Á|Â|Ã|Ä|Å|Ǻ|Ā|Ă|Ą|Ǎ/' => 'A',		'/à|á|â|ã|å|ǻ|ā|ă|ą|ǎ|ª/' => 'a',		'/Ç|Ć|Ĉ|Ċ|Č/' => 'C',		'/ç|ć|ĉ|ċ|č/' => 'c',		'/Ð|Ď|Đ/' => 'D',		'/ð|ď|đ/' => 'd',		'/È|É|Ê|Ë|Ē|Ĕ|Ė|Ę|Ě/' => 'E',		'/è|é|ê|ë|ē|ĕ|ė|ę|ě/' => 'e',		'/Ĝ|Ğ|Ġ|Ģ/' => 'G',		'/ĝ|ğ|ġ|ģ/' => 'g',		'/Ĥ|Ħ/' => 'H',		'/ĥ|ħ/' => 'h',		'/Ì|Í|Î|Ï|Ĩ|Ī|Ĭ|Ǐ|Į|İ/' => 'I',		'/ì|í|î|ï|ĩ|ī|ĭ|ǐ|į|ı/' => 'i',		'/Ĵ/' => 'J',		'/ĵ/' => 'j',		'/Ķ/' => 'K',		'/ķ/' => 'k',		'/Ĺ|Ļ|Ľ|Ŀ|Ł/' => 'L',		'/ĺ|ļ|ľ|ŀ|ł/' => 'l',		'/Ñ|Ń|Ņ|Ň/' => 'N',		'/ñ|ń|ņ|ň|ŉ/' => 'n',		'/Ò|Ó|Ô|Õ|Ō|Ŏ|Ǒ|Ő|Ơ|Ø|Ǿ/' => 'O',		'/ò|ó|ô|õ|ō|ŏ|ǒ|ő|ơ|ø|ǿ|º/' => 'o',		'/Ŕ|Ŗ|Ř/' => 'R',		'/ŕ|ŗ|ř/' => 'r',		'/Ś|Ŝ|Ş|Š/' => 'S',		'/ś|ŝ|ş|š|ſ/' => 's',		'/Ţ|Ť|Ŧ/' => 'T',		'/ţ|ť|ŧ/' => 't',		'/Ù|Ú|Û|Ũ|Ū|Ŭ|Ů|Ű|Ų|Ư|Ǔ|Ǖ|Ǘ|Ǚ|Ǜ/' => 'U',		'/ù|ú|û|ũ|ū|ŭ|ů|ű|ų|ư|ứ|ǔ|ǖ|ǘ|ǚ|ǜ/' => 'u',		'/Ý|Ÿ|Ŷ/' => 'Y',		'/ý|ÿ|ŷ/' => 'y',		'/Ŵ/' => 'W',		'/ŵ/' => 'w',		'/Ź|Ż|Ž/' => 'Z',		'/ź|ż|ž/' => 'z',		'/Æ|Ǽ/' => 'AE',		'/ß/'=> 'ss',		'/Ĳ/' => 'IJ',		'/ĳ/' => 'ij',		'/Œ/' => 'OE',		'/ƒ/' => 'f'	);	foreach ($foreign_characters as $match => $replace) {		$string = preg_replace($match, $replace, $string);	}	$string = str_replace(array(" ", '/', '.'), array('-', '', '-'), $string);//	$string = preg_replace('/([^A-z0-9_-\s\.]+)/', '', $string);	$string = preg_replace('/([-,]+)/', '-', $string);	$string = preg_replace('/(\s)*\/(\s)*/', '-', $string);	// Remove doule (-) at the end of string	$string = preg_replace('/-*$/', '', $string);	if ($include_ext) return $string . ((defined('REWRITE_URL_END_TYPE') AND REWRITE_URL_END_TYPE != '') ? '.' . REWRITE_URL_END_TYPE : '');	return $string;}function skipHtmlTag($content) {	$content = (string) $content;	$content = htmlspecialchars_decode($content);	// Remove <script>	$content = preg_replace('/<script([^>]+).*<\/script>/i', '', $content);	// Remove <style>	$content = preg_replace('/<style([^>]+).*<\/style>/i', '', $content);	// Remove <tag>	$content = preg_replace('/<\/?[^>]+>/i', '', $content);	// Remove space	$content = preg_replace('/(\s)+/i', ' ', $content);	return $content;}function fetchRandomString($length = 32) {	$hash = sha1(TIMENOW . microtime() . uniqid(mt_rand(), true) . @implode('', @fstat(@fopen( __FILE__, 'r'))));	return substr($hash, 0, $length);}function stripBlankAscii($text, $replace){	global $options;	static $blanks = null;	if ($blanks === null AND trim($options['blankasciistrip']) != '')	{		$blanks = array();	$charset = 'UTF-8';		$charset_unicode = (strtolower($charset) == 'utf-8');		$raw_blanks = preg_split('#\s+#', $options['blankasciistrip'], -1, PREG_SPLIT_NO_EMPTY);		foreach ($raw_blanks AS $code_point)		{			if ($code_point[0] == 'u')			{				// this is a unicode character to remove				$code_point = intval(substr($code_point, 1));				$force_unicode = true;			}			else			{				$code_point = intval($code_point);				$force_unicode = false;			}			if ($code_point > 255 OR $force_unicode OR $charset_unicode)			{				// outside ASCII range or forced Unicode, so the chr function wouldn't work anyway				$blanks[] = '&#' . $code_point . ';';				$blanks[] = convert_int_to_utf8($code_point);			}			else			{				$blanks[] = chr($code_point);			}		}	}	if ($blanks)	{		$text = str_replace($blanks, $replace, $text);	}	return $text;}function convertInt2Utf8($intval){	$intval = intval($intval);	switch ($intval)	{		// 1 byte, 7 bits		case 0:			return chr(0);		case ($intval & 0x7F):			return chr($intval);		// 2 bytes, 11 bits		case ($intval & 0x7FF):			return chr(0xC0 | (($intval >> 6) & 0x1F)) .				chr(0x80 | ($intval & 0x3F));		// 3 bytes, 16 bits		case ($intval & 0xFFFF):			return chr(0xE0 | (($intval >> 12) & 0x0F)) .				chr(0x80 | (($intval >> 6) & 0x3F)) .				chr (0x80 | ($intval & 0x3F));		// 4 bytes, 21 bits		case ($intval & 0x1FFFFF):			return chr(0xF0 | ($intval >> 18)) .				chr(0x80 | (($intval >> 12) & 0x3F)) .				chr(0x80 | (($intval >> 6) & 0x3F)) .				chr(0x80 | ($intval & 0x3F));	}}function yplitgroupStrlen($string, $unhtmlspecialchars = false){	$string = preg_replace('#&\#([0-9]+);#', '_', $string);	if ($unhtmlspecialchars)	{		$string = unhtmlspecialchars($string, false);	}	if (function_exists('mb_strlen') AND $length = @mb_strlen($string, 'UTF-8'))	{		return $length;	}	else	{		return strlen($string);	}}function unhtmlspecialchars($text, $doUniCode = false){	if ($doUniCode) {		$text = preg_replace('/&#([0-9]+);/esiU', "convert_int_to_utf8('\\1')", $text);	}	return str_replace(array('&lt;', '&gt;', '&quot;', '&amp;'), array('<', '>', '"', '&'), $text);}function toUtf8($in, $charset = false, $strip = true){	if ('' === $in OR false === $in OR is_null($in))	{		return $in;	}	// Fallback to UTF-8	if (!$charset)	{		$charset = 'UTF-8';	}	// Try iconv	if (function_exists('iconv'))	{		return @iconv($charset, 'UTF-8//IGNORE', $in);	}	// Try mbstring	if (function_exists('mb_convert_encoding')) {		return @mb_convert_encoding($in, 'UTF-8', $charset);	}	if (!$strip) {		return $in;	}	// Strip non valid UTF-8	// TODO: Do we really want to do this?	$utf8 = '#([\x09\x0A\x0D\x20-\x7E]' .			# ASCII			'|[\xC2-\xDF][\x80-\xBF]' .				# non-overlong 2-byte			'|\xE0[\xA0-\xBF][\x80-\xBF]' .			# excluding overlongs			'|[\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}' .	# straight 3-byte			'|\xED[\x80-\x9F][\x80-\xBF]' .			# excluding surrogates			'|\xF0[\x90-\xBF][\x80-\xBF]{2}' .		# planes 1-3			'|[\xF1-\xF3][\x80-\xBF]{3}' .			# planes 4-15			'|\xF4[\x80-\x8F][\x80-\xBF]{2})#S';	# plane 16	$out = '';	$matches = array();	while (preg_match($utf8, $in, $matches))	{		$out .= $matches[0];		$in = substr($in, strlen($matches[0]));	}	return $out;}function yplitgroupFetchUserSalt( $length = 30 ){	$salt = '';	for ($i = 0; $i < $length; $i++)	{		$salt .= chr(rand(33, 126));	}	return $salt;}function fetch_sessionhash(){	return md5(uniqid(microtime(), true) . rand(1,10));}function trimTitle($title, $start, $end){	if (empty($title)) return $title;	$start = intval($start);	$end = intval($end);	$new_title = substr($title, $start, $end);	if (strlen($new_title) < strlen($title)) $new_title .= '...';	return $new_title;}